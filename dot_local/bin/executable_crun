#!/usr/bin/env python3

import os
import argparse


def compile_and_run(filename, flags):
    output_name = os.path.splitext(filename)[0]
    command = ["g++", "-o", output_name] + flags + [filename]

    if os.system(" ".join(command)) == 0:
        os.system("./" + output_name)
    else:
        print(f"Compilation of {filename} failed.")


def main():
    parser = argparse.ArgumentParser(description="Compile and run C++ programs")
    parser.add_argument(
        "filename", nargs="*", help="Names of the .cpp file(s) to compile and run"
    )
    parser.add_argument(
        "-r", "--release", action="store_true", help="Compile in release mode"
    )

    args = parser.parse_args()

    flags = [
        "-std=c++20",
        "-pedantic-errors",
        "-Wall",
        "-Weffc++",
        "-Wextra",
        "-Wconversion",
        "-Wsign-conversion",
    ]

    if args.release:
        flags.extend(["-O2", "-DNDEBUG"])
    else:
        flags.append("-ggdb")

    if args.filename:
        for filename in args.filename:
            if os.path.isfile(filename) and filename.endswith(".cpp"):
                compile_and_run(filename, flags)
            else:
                print(f"{filename} not found or not a .cpp file.")
    else:
        cpp_files = [file for file in os.listdir() if file.endswith(".cpp")]
        if len(cpp_files) == 1:
            compile_and_run(cpp_files[0], flags)
        elif cpp_files:
            if os.system("g++ -o my_program *.cpp") == 0:
                os.system("./my_program")
            else:
                print("Compilation of .cpp files failed.")
        else:
            print("No .cpp files found in the directory.")


if __name__ == "__main__":
    main()
